{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Loading from '../../shared/Loading';\nimport fakeData from '../../fakeData.json';\nimport { Store } from \"../../core/redux/store\";\n\nvar getLessons = function getLessons() {\n  return new _Promise(function (res) {\n    setTimeout(function () {\n      res(fakeData);\n    }, 1000);\n  });\n};\n\nexport var Home = function Home(props) {\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoading = _React$useState2[0],\n      setIsLoading = _React$useState2[1];\n\n  var _React$useContext = React.useContext(Store),\n      state = _React$useContext.state,\n      dispatch = _React$useContext.dispatch;\n\n  useEffect(function () {\n    getLessons().then(function (lessons) {\n      setIsLoading(false);\n      dispatch({\n        type: 'SET_TRAININGS',\n        payload: lessons\n      });\n    });\n  }, [dispatch]);\n  var listless = state.trainings.map(function (lesson) {\n    return __jsx(Lesson, {\n      key: lesson.title,\n      value: lesson\n    });\n  });\n\n  if (isLoading) {\n    return __jsx(Loading, null);\n  } else {\n    return __jsx(React.Fragment, null, __jsx(\"h1\", null, \"Trainings offered by Hackages\"), __jsx(List, null, listless));\n  }\n};\nexport var Lesson = function Lesson(props) {\n  var value = props.value;\n  var days = value.dates.map(function (date, index) {\n    if (index === 0) {\n      return \"From \" + date + \" \";\n    } else if (index === value.dates.length - 1) {\n      return \"to \" + date;\n    }\n\n    return \"\";\n  });\n  return __jsx(React.Fragment, null, __jsx(ListItem, null, __jsx(Card, {\n    variant: \"outlined\"\n  }, __jsx(CardContent, null, __jsx(\"h1\", null, \"\".concat(value.dates[0], \" \").concat(value.title, \" \")), __jsx(\"h2\", null, days), __jsx(\"p\", null, \"\".concat(value.dates.length, \" days  at \").concat(value.location.country, \" - \").concat(value.location.locality, \" price ->  \").concat(value.price, \"\\u20AC\")), __jsx(\"p\", null, \" langage ->  \".concat(value.topics[0].name))), __jsx(CardActions, null, __jsx(Button, {\n    size: \"small\"\n  }, __jsx(Link, {\n    to: \"/details/\".concat(value.id)\n  }, \" Order now ! \"))))));\n};","map":null,"metadata":{},"sourceType":"module"}